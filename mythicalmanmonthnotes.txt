
JOYS OF THE CRAFT "Why is programming fun? WHat delights may its practitioner
expect as his reward?  First is the sheer joy of making things. As the child
delights in his mud pie, so the adult enjoys building things, especially things
of his own design.  ...Second is the pleasure of making things that are useful
to other people. Deep within, we want others to use our work and to find it
helpful.  ...Third is the fascination of fashioning complex puzzle-like objects
of interlocking moving parts and watching them work in subtle cycles, playing
out the consequences of principles built in from the beginning.  ...Fourth is
the joy of always learning, which springs from the nonrepeating nature of the
task.  ...Finally, there is the delight of working in such a tractable medium.
The programmer, like the poet, works only slightly removed from pure
thought-stuff.  He builds his castles in the air, from air, creating by exertion
of the imagination. Few media of creation are so flexible, so easy to polish and
rework, so readily capable of realizing grand conceptual structures." (pg. 7)

WOES OF THE CRAFT "...one must perform perfectly. The computer resembles the
magic of legend in this respect, too. If one character, one pause, of the
incantation is not strictly in proper form, the magic doesn't work."

"The dependence upon others has a particular case that is especially painful for
the system programmer. He depends upon other people's programs. These are often
maldesigned, poorly implemented, incompletely delivered (no source code or test
cases), and poorly documented." (pg. 8)

"The last woe, and sometimes the last straw, is that the product over which one
has labored so long appears to be obsolete upon (or before) completion. Already
colleagues or competitors are in hot pursuit of new and better ideas." (pg. 9)

"Good cooking takes time. If you are made to wait, it is to serve you better,
and to please you. -Menu of Restaurant Antoine, New Orleans" (pg. 13)

OPTIMISM "All programmers are optimists. Perhaps this modern sorcery especially
attracts those who believe in happy endings and fairy godmothers. Perhaps the
hundreds of nitty frustrations drive away all but those who habitually focus on
the end goal. Perhaps it is merely that computers are young, programmers are
younger, and the young are always optimists. But however the selection process
works, the result is indisputable: "THis time it will surely run," or "I just
found the last bug." (pg. 14)

"Computer programming... creates with an exceedingly tractable medium. The
programmer builds from pure thought-stuff: concepts and very flexible
representations thereof. Because the medium is tractable, we expect few
difficulties in implementation; hence our pervasive optimism. Because our ideas
are faulty, we have bugs; hence our optimisim unjustified." (pg. 15)

SYSTEMS TEST "For some years I have been successfully using the following rule
of thumb for scheduling a software task: 1/3 planning 1/6 coding 1/4 component
test and early system test 1/4 system test, all components in hand"

"In examining conventionally scheduled projects, I have found that few allowed
one-half of the project schedule for testing, but that most did indeed spend
half of the actual schedule for that purpose."

"Failure to allow enough time for system test... is peculiarly disastrous. Since
the delay comes at the end of the schedule, no one is aware of schedule trouble
until almost the delivery date. Bad news, late and without warning, is
unsettling to customers and to managers.  ...delay at this point has unusually
severe financial, as well as psychological, repercussions." (pg. 20)

GUTLESS ESTIMATING "Observe that for the programmer, as for the chef, the
urgency of the patron may govern the scheduled completion of the task, but it
cannot govern the actual completion. "

"It is very difficult to make a vigorous, plausible, and job-risking defense of
an estimate that is derived by no quantitative method, supported by little data,
and certified chiefly by the hunches of the managers." (pg. 21)

Ch. 3: The Surgical Team

"Mills proposes that each segment of a large job be tackled by a team, but that
the team be organized like a surgical team rather than a hog-butchering  team.
That is, instead of each member cutting away on the problem, one does the
cutting and the others give him every support that will enhance his
effectiveness and productivity." (pg. 32)

"The sugeon. Mills calls him a chief programmer. He personally defines the
functional and performance specifications, designs the program, codes it, tests
it, and writes its documentation."

"The copilot. He is the alter ego of the surgeon, able to do any part of the
job, but is less experienced. His main function is to share in the design as a
thinker, discussant, and evaluator. The surgeon tries ideas on him, but is not
bound by his advice."

"The administrator. The surgeon is boss, and he must have the last word on
personnel, raises, space, and so on, but he must spend almost none of his time
on these matters. Thus he needs a professional administrator who handles money,
people, space, and machines, and who interfaces with the administrative
machinery of the rest of the organization." (pg. 33)

"The editor. The surgeon is responsible for generating the documentation... The
editor, however, takes the draft or dictated manuscript produced by the surgeon
and criticizes it, reworks it, provides it with references and bibliography,
nurses it through several versions, and oversees the mechanics of production."
(pg. 33)

"Two secretaries. The administrator and the editor will each need a secretary;
the administrator's secretary will handle project correspondence and non-product
files."

"The program clerk. He is responsible for maintaining all the technical records
of the team in a programming-product library. The clerk is trained as a
secretary and has responsibility for both machine-readable and human-readable
files." (pg. 33)

"The toolsmith... " (pg. 34)

"The tester... "

"The language lawyer. By the time Algol came along, people began to recognize
that most computer installations have one or two people who delight in mastery
of the intricacies of a programming language. And these experts turn out to be
very useful and very widely consulted. The talent here is rather different from
that of the surgeon, who is primarily a system designer and who thinks
representations. The language lawyer can find a neat and efficient way to use
the language to do difficult, obscure, or tricky things." (pg. 34-35)

Ch. 4: Aristocracy, Democracy, and System Design

CONCEPTUAL INTEGRITY "... conceptual integrity is the the most important
consideration in system design. It is better to have a system omit certain
anomalous features and improvements, but to reflect one set of design ideas,
than to have one that contains many good but independent and uncoordinated
ideas." (pg. 42)

ACHIEVING CONCEPTUAL INTEGRITY "The purpose of a programming system is to make a
computer easy to use. To to do this, it furnishes languages and various
facilities that are in fact programs invoked and controlled by language
features." (pg. 43)

"Because ease of use is the purpose, this ratio of function to conceptual
complexity is the ultimate test of system design."

"... that system is best in which one can specify things with the most
simplicity and straightforwardness." (pg. 44)

"Simplicity and straighforwardness proceeds from conceptual integrity. Every
part must reflect the same philosophies and the same balancing of desiderata."

ARISTOCRACY AND DEMOCRACY "Conceptual integrity in turn dictates that the design
must proceed from one mind, or from a very small number of agreeing resonant
minds."

"Schedule pressures, however, dictate the system building needs many hands. Two
techniques are available for resolving this... The first is a careful division
of labor between architecture and implementation. The second is the .. [surgical
team discussed in Ch. 3]" 

"architecture... the complete and detailed specification of the user interface."
(pg. 45)

"As Blaauw has said, "Where architecture tells what happened, implementation
tells how it is made to happen."

"the conceptual integrity of a system determines its ease of use. Good features
and ideas that do not integrate with a system's basic concepts are best left
out. If there appear many such important but incompatible ideas, one scraps the
whole system and starts again on an integrated system with different basic
concepts." (pg. 46)

Ch. 5: The Second-System Effect

"Adde parvum parvo magnus acervus erit.  [Add little by little and there will be
a big pile.] -Ovid" (pg. 53)

INTERACTIVE DISCIPLINE FOR THE ARCHITECT

"The architect of a building works against a budget, using estimating techniques
that are later confirmed or corrected by the contractor's bids."

"An analogous process governs the architect of a computer system or a
programming system. He has, however, the advantage of getting bids from the
contractor at many early points in his design, almost any time he asks for them.
He usually has the disadvantage of working with only one contractor, who can
raise or lower his estimates to reflect his pleasure with the design."

"The architect has two possible answers when confronted with an estimate that is
too high: cut the design or challenge the estimate by suggesting cheaper
implementations. This latter is inherently an emotion-generating activity. The
architect is now challenging the builder's way of doing the builder's job." (pg.
54)

"Normally the builder will counter by suggesting changes to the architecture.
Often he is right - some minor feature may have unexpectedly large costs when
the implementation is worked out."

SELF-DISCIPLINE - THE SECOND-SYSTEM EFFECT

"An architect's first work is apt to be spare and clean. He knows he doesn't
know what he's doing, so he does it carefully and with great restraint."

"Sooner or later the first system is finished, and the architect, with firm
confidence and a demonstrated mastery of that class of systems, is ready to
build a second system... This second system is the most dangerous system a man
ever designs."

"The general tendency is to over-design the second system, using all the ideas
and frills that were cautiously sidetracked on the first one." (pg. 55)

"The second-system effect has another manifestation somewhat different from pure
functional embellishment. That is the tendency to refine techniques whose very
existence has been made obsolete by changes in basic system assumptions." (pg.
56)

"How does the architect avoid the second-system effect? Well, obviously he can't
skip his second system. But he can be conscious of the peculiar hazards of that
system, and exert extra self-discipline to avoid functional ornamentation and to
avoid extrapolation of functions that are obviated by changes in assumptions and
purposes."

"Hows the project manager avoid the second-system effect? By insisting on a
senior architect who has at least two systems under his belt." (pg. 58)

Ch. 6: Passing the Word

WRITTEN SPECIFICATIONS - THE MANUAL

"The manual is the external specification of the product. It describes and
prescribes every detail of what the user sees. As such, it is the chief product
of the architect."

"The manual must not only describe everything the user does see, including all
interfaces; it must also refrain from describing what the user does not see."

"... precision is more important that liveliness." (pg. 62)

"It defines compatibility, prescribes what is to be achieved, and enumerates
those areas of external appearance where the architecture is intentionally
silent..."

FORMAL DEFINITIONS

"... the manual writer must strain himself and his language to achieve the
precision needed. An attractive alternative is to use a formal notation for such
definitions."

CONFERENCES AND COURTS

"Needless to say, meetings are necessary. The hundreds of man-to-man
consultations must be supplemented by larger and more formal gatherings. We
found two levels of these to be useful. The first is a weekly half-day
conference of all the architects, plus official representatives of the hardware
and software implementers, and the market planners. The chief system architect
presides."

"Anyone can propose problems or changes, but proposals are usually distributed
before the meeting. A new problemis usually discussed a while. The emphasis is
on creativity, rather than merely decision." (pg. 66)

"Detailed change proposals then come up for decisions. These have been
circulated and carefully considered by implementers and users, and the pros and
cons are well delineated. If a consensus emerges, well and good. If not, the
chief architect decides. Minutes are kept and decisions are formally, promptly,
and widely disseminated." (pg. 66-67)

"Decisions fromt he weekly conferences give quick results and all work to
proceed. If anyone is too unhappy, instant appeals to the project manager are
possible, but this happens very rarely."

"The formality of written proposals focuses attention, forces decision, and
avoids committee-draft inconsistencies."

"The clear vesting of decision-making power in the chief architect avoids
compromise and delay." (pg. 67)

MULTIPLE IMPLEMENTATIONS

"In most computer projects there comes a day when it is discovered that the
machine and the manual don't agree. When the confrontation follows, the manually
usually loses, for it can be changed far more quickly and cheaply than the
machine."

THE TELEPHONE LOG

"As implementation proceeds, countless questions of architectural interpretation
arise, no matter how precise the specification." (pg. 68)

"One useful mechanism is a telephone log kept by the architect. In it he records
every question and every answer."

PRODUCT TEST

"The project manager's best friend is his daily adversary, the independent
product-testing organization. This group checks machines and programs against
specifications and serves as a devil's advocate, pinpointing every conceivable
defect and discrepancy. Every development organization needs such an independent
technical auditing group to keep it honest."

"In the last analysis the customer is the independent auditor. In the merciless
light of real use, every flaw will show. The product-testing group then is the
surrogate customer, specialized for finding flaws." (pg. 69)

Ch. 7: Why Did the Tower of Babel Fail?

COMMUNICATION IN THE LARGE PROGRAMMING PROJECT

"Schedule disaster, functional misfits, and system bugs all arise because the
left hand doesn't know what the right hand is doing. As the work proceeds, the
several teams slowly change the functions, sizes, and speeds of their own
programs, and they explicitly or implicitly change their assumptions about the
inputs available and the uses to be made of the outputs." (pg. 74)

"How, then, shall teams communicate with one another? In as many ways as
possible."

"Informally. Good telephone service and a clear definition of intergroup
dependencies will encourage the hundreds of calls upon which common
interpretation of written documents depends."

"Meetings. Regular project meetings, with one team after another giving
technical briefings, are invaluable. Hundreds of minor misunderstandings get
smoked out this way."

"Workbook. A formal project workbook must be started at the beginning. This
deserves a section by itself."

THE PROJECT WORKBOOK

"The project workbook is not so much a seperate document as it is a structure
imposed on the documents that the project will be producing anyway."

"All the documents of the project need to be part of this structure. This
includes objectives, external specification, interface specifications, technical
standards, internal specifications, and administrative memoranda." (pg. 75)

"The early design of the project workbook ensures that the documentation
structure itself is crafted, not haphazard."

"The second reason for the project workbook is control of the distribution of
information. The problem is not to restrict information, but to ensure that
relevant information gets to all the people who need it."

"Of critical importance is timely updating. The workbook must be current." (pg.
76)

ORGANIZATION IN THE LARGE PROGRAMMING PROJECT

"If there are n workers on a project, there are (n2[n squared]-n)/2 interfaces
across which there may be communication, and there are potentially almost 2n
teams within which coordination must occur. The purpose of organization is to
reduce the amount of communication and coordination necessary; hence
organization is a radical attack on the communication problems treated above."
(pg. 78-79)

"... A tree organization arises as a structure of authority and responsibility."

"... consider a tree-like programming organization... They are: 1. a mission 2.
a producer 3. a technical director or architect 4. a schedule 5. a division of
labor 6. interface definitions among the parts"

"All of this is obvious and conventional except the distinction between the
producer and the technical director."

"What is the role of the producer? He assembles the team, divides the work, and
establishes the schedule. He acquires and keeps on acquiring the necessary
resources. This means that a major part of his role is communication outside the
team, upwards and sideways. He establishes the pattern of communication and
reporting within the team. Finally, he ensures that the schedule is met,
shifting resources and organization to respond to changing circumstances." (pg.
79)

The Technical Director "... conceives of the design to be built, identifies its
subparts, specifies how it will look from outside, and sketches its internal
structure. He provides unity and conceptual integrity to the whole design; thus
he serves as a limit on system complexity."

"His communications are chiefly within the team. His work is almost completely
technical."

"The producer and the technical director may be the same man. This is readily
workable on very small teams, perhaps three to six programmers. On larger
projects it is very rarely workable, for two reasons. First, the man with strong
management talent and strong technical talent is rarely found. Thinker are rare;
doers are rarer; and thinker-doers are rarest."

"The producer may be the boss, the director his right-hand man. The difficulty
here is to establish the director's authority to make technical decisions
without impacting his time as would putting him in the management
chain-of-command." (pg. 80)

"Obviously the producer must proclaim the director's technical authority, and he
must back it in an extremely high proportion of the test cases that will arise.
For this to be possible, the producer and the director must see alike on
fundamental technical philosophy; they must talk out the main technical issues
privately, before they really become timely; and the producer must have a high
respect for the director's technical prowess." (pg. 80-81)

"Less obviously, the producer can do all sorts of subtle things with the symbols
of status (office size, carpet, furnishing, carbon copies, etc.) to proclaim
that the director, although outside the management line, is a source of decision
power."

"The director may be boss, and the producer his right-hand man." (pg. 81)

"Communication and its consequent, organization, are critical for success." (pg.
83)

Ch. 8: Calling the Shot

PORTMAN'S DATA

"He found his programming teams missing schedules by about one-half - each job
was taking approximately twice as long as estimated." (pg. 89)

"These showed that the estimating error could be entirely accounted for by the
fact that his teams were only realizing 50 percent of the working week as actual
programming and debugging time. Machine downtime, higher-priority short
unrelated jobs, meetings, paperwork, company business, sickness, personal time,
etc. accounted for the rest. In short, the estimates made an unrealistic
assumption about the number of technical work hours per man-year." (pg. 89-90)

"Programming productivity may be increased as much as five times when a suitable
high-level language is used." (pg. 94)

Ch. 9: Ten Pounds in a Five-Pound Sack

AJM: Programming space and size control largely irrelevant today 

"Beyond craftmanship lies invention, and it is here that lean, spare, fast
programs are born. Almost always these are the result of strategic breakthrough
rather than tactical cleverness. Sometimes the strategic breakthrough will be a
new algorithm ... "

"Much more often, strategic breakthrough will come from redoing the
representation of the data or tables. This is where the heart of a program lies.
Show me your flowcharts and conceal your tables, and I shall continue to be
mystified. Show me your tables, and I won't usually need your flowcharts;
they'll be obvious." (pg. 102)

Ch. 10: The Documentary Hypothesis

"The hypothesis: Amid a wash of paper, a small number of documents become the
critical pivots around which every project's management revolves. These are the
manager's chief personal tools. - W. Bengough, "Scene in the old Congressional
Library," 1897" (pg. 107)

"The technology, surrounding organization, and the traditions of the craft
conspire to define certain items of paperwork that a project must prepare. To
the new manager, fresh from operating as a craftsman himself, these seem an
unmitigated nuisance, an unnecessary distraction, and a white tide that
threatens to engulf him. And indeed, most of them are exactly that."

"Bit by bit, however, he comes to realize that a certain small set of these
documents embodies and expresses much of his managerial work. The preparation of
each one serves as a major occasion for focusing thought and crystallizing
discussions that otherwisewould wander endlessly. Its maintenance becomes his
surveillance and warning mechanism. The document itself serves as a checklist, a
status control, and a database for his reporting." (pg. 108)

DOCUMENTS FOR A COMPUTER PROJECT

"Objectives. This defines the need to be met and the goals, desiderata,
constraints, and priorities."

"Specifications. This is a computer manual plus performance specification. It is
one of the first documents generated in proposing a new product, and the last
document finished."

"Schedule."

"Budget. Not merely a constraint, the budget is one of the manager's most useful
documents. Existence of the budget forces technical decisions that otherwise
would be avoided; and more important, it forces and clarifies policy decisions."

"Organization Chart."

"Space allocations." (pg. 108)

"Estimate, forecast, prices." (pg. 109)

"In many software projects, people begin by holding meetings to debate
structure; then they start writing programs. No matter how small the project,
however, the manager is wise to begin immediately to formalize at least
mini-documents to serve as his database. And he turns out to need documents much
like those of other managers." (pg. 110)

WHY HAVE FORMAL DOCUMENTS?

"First, writing the decisions down is essential. Only when one writes do the
gaps appear and the inconsistencies protrude. the act of writing turns out to
require hundreds of mini-decisions, and it is the existence of these that
distinguishes clear, exact policies from fuzzy ones."

"Second, the documents will communicate the decisions to others. The manager
will be continually amazed that policies he took for common knowledge are
totally unknown by some member of his team. Since his fundamental job is to keep
everybody going in the same direction, his chief daily task will be
communication, not decision-making, and his documents will immensely lighten his
this load."

"Finally, a manager's documents give him a database and checklist. By reviewing
them periodically he sees where he is, and he sees what changes of emphasis or
shifts in direction are needed." (pg. 111)

"... only a small part - perhaps 20 percent - of the executive's time is spent
on tasks where he needs information from outside his head. The rest is
communication: hearing, reporting, teaching, exhorting, counseling, encouraging.
But for the fraction that is data-based, the handful of critical documents are
vital, and they will meet almost all needs." 

"The task of the manager is to develop a plan and then to realize it. But only
the written plan is precise and communicable." (pg. 112)

Ch. 11: Plan to Throw One Away

"In most projects, the first system built is barely usable. It may be to slow,
too big, awkward to use, or all three. There is no alternative but to start
again, smarting but smarter, and build a redesigned version in which these
problems are solved." (pg. 116)

"Where a new system concept or new technology is used, one has to build a system
to throw away, for even the best planning is not so omniscient as to get it
right the first time."

"The management question, therefore, is not whether to build a pilot system and
throw it away. You will do that. The only question is whether to plan in advance
to build a throwaway, or to promise to deliver the throwaway to customers."

"Delivering that throwaway to customers buys time, but it does so only at the
cost of agony for the user, distraction for the builders while they do the
redesign, and a bad reputation for the product that the best redesign will find
hard to live down."

"Hence plan to throw one away; you will, anyhow." (pg. 116)

THE ONLY CONSTANCY IS CHANGE ITSELF

"The first step is to accept the fact of change as a way of life, rather than an
untoward and annoying exception." (pg. 117)

"... the programmer delivers satisfaction of a user need rather than any
tangible product."

"... some changes in objectives are inevitable, and it is better to be prepared
for them than to assume that they won't come."

"The throw-one-away concept is itself just an acceptance of the fact that as one
learns, he changes the design." (pg. 117)

PLAN THE ORGANIZATION FOR CHANGE

"Structuring an organization for change is much harder than designing a system
for change. Each man must be assigned to jobs that broaden him, so that the
whole force is technically flexible. On a large project the manager needs to
keep two or three top programmers as a technical calvary that can gallop to the
rescue wherever the battle is thickest." (pg. 118)

"Managers need to be sent to technical refresher courses, senior technical
people to management training."

"A program doesn't stop changing when it is delivered for customer use. The
changes after delivery are called program maintenance." (pg. 120)

"It consists chiefly of changes that repair design defects."

"The total cost of maintaining a widely used program is typically 40 percent or
more of the cost of developing it. Surprisingly, this cost is strongly affected
by the number of users. More users find more bugs." (pg. 121)

"The fundamental problem with program maintenance is that fixing a defect has a
substantial (20-50 percent) chance of introducing another. So the whole process
is two steps forward and one step back." 

"... the repairer is usually not the man who wrote the code, and often he is a
junior programmer or a trainee."

"As time passes, the system becomes less and less well-ordered. Sooner or later
the fixing ceases to gain any ground. Each step forward is matched by a backward
one... A brand-new, from-the-ground-up redesign is necessary."

""Things are always at their best in the beginning," said Pascal" (pg. 123)

Ch. 12: Sharp Tools

AJM: Largely irrelevant today. In short, use a high-level programming language
and a good documentation/project management tool. 

Ch. 13: The Whole and the Parts

AJM: Largely irrelevant today but historically interesting. 

Ch. 14: Hatching a Catastrophe

"When one hears of disastrous schedule slippage in a project, he imagines that a
series of major calamities have befallen it. Usually, however, the disaster is
due to termites, not tornadoes; and the schedule has slipped imperceptibly but
inexorably."

"But the day-to-day slippage is harder to recognize, harder to prevent, harder
to make up." (pg. 154)


