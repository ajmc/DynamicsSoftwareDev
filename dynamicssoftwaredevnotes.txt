"#1: Establish a shared vision." (pg. 11)

"However the communication transpires, you have to be willing to risk your
relationship with the team (and sometimes even your career or reputation) for
the good of the team. If you aren't willing to take those kinds of risks, what
you have to say won't be encoded with emotional content strong enough to break
through the defensive walls you are confronting." (pg. 19)

"#2: Get their heads in the game." (pg. 20)

"#3: Create a multi-release technology plan.

The extent of your team's trust in the future will stem from their degree of
happiness with their commitment to and involvement in what I call "the
technology plan." The technology plan is the fundamental output of empowered
consensus, the basis of all trust in the future. In the rough democracy
empowered consensus creates, everybody gets a kind of vote on the technology
plan. More important, everybody's input is rigorously sought. The technology
plan is the foundation of all team behavior: ideally, it embodies the best
thinking of all the team members. 

The technology plan is the contract among the team members, the constitution of
the group." (pg. 22) 

"Strategic features were centered around fundamental and constraining choices...
Competitive features responded to or perhaps even trumped a feature that their
competition had and they didn't...  Customer satisfaction features were feature
they head about all the time that their customers wanted...  Investment features
were those things they decided to do to their technology even though the
benefits wouldn't show up in the next release (or even in the next few
releases)...  Paradigmatic features... were those that changed the way people
worked." (pg.  25-26)

"The team members will be conscious of the extent of the work that went into the
plan and aware that new initiatives will have to pass through a similarly
extensive process. An idea therefore has to have considerable merit and
probability of survival before it even gets submitted to the team for
consideration. THis tends to reduce random probability of survival before it
even gets submitted to the team for consideration. This tends to reduce random
proposals and creates a relatively stable environment." (pg. 26)

"#4: Don't flip the bozo bit" (pg. 27)

"When the endgame of the previous project runs a tad too long - say, a couple of
unexpected months on top of several earlier slips - when the limits of executive
ignorance and emotional stability have been thoroughly tested, when customers
are howling about broken promises and the press is (or your colleagues are)
snickering about your vaporware, that final exhilarating push to ship the
project can deteriorate into a death march." (pg. 31)

"They know how many bugs they're shipping with. They know how deformed and
inelegant the code is. There are huge expanses of brittle code that no one
understands. They are afraid that it doesn't really work. Along the way,
expediency has eroded their technical self-esteem. While they're not proud of
that, there is a kind of pride that emerges, the pride of veterans, of
survivors. They have faced combat and lived. In a project that has been properly
load-balanced, each and every team member ends up convinced that his or her
heroic personal sacrifices are what caused the product to ship. And they're
right. Tremendous individual efforts, each critical, has made the difference."
(pg. 31)

"#5: Use Scouts" (pg. 32)

"Before you begin the next project, scout it out.

... From time immemorial, whenever significant groups of people have been on a
dangerous journey, they have sent scouts forward to check out the future. A
software project is nothing if not a dangerous journey undertaken by significant
groups of people, so send a clever person or two "up ahead" to scout out the
next project." (pg. 32)

"Scouts can create or update the multi-release technology plan.. They can visit
customers, get trained on competitive technology, make essential acquisitions,
and lay out methods and procedures for the next project." (pg. 32)

"The basic idea... is not to slow the pace of change, or to create more
stability; but to get good at change, at managing technology in motion. Dance is
more beautiful than stasis. Movement holds more potential for adaptation and
self-actualization than rigidity." (pg. 34)
 

































 
























